// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status {
  ACEITO
  PENDENTE
  PREPARANDO
  ENTREGUE
  CANCELADO
}

enum roles {
  ADMIN
  CLIENT
}

enum meioPagamento {
  PIX
  CARTAO_CREDITO
  CARTAO_DEBITO
}

model Usuario {
  id              String     @id @default(uuid())
  nome            String?    @db.VarChar()
  email           String?    @unique @db.VarChar()
  senha           String?    @db.VarChar()
  telefone        String?    @db.VarChar(11)
  dataCriacao     DateTime?  @default(now()) @map("data de criacao") @db.Date
  dataAtualizacao DateTime?  @default(now()) @map("data de atualizacao") @db.Date
  role            roles?
  enderecos       Endereco[] @relation("UsuarioEndereco")
  pedidos         Pedido[]
  carrinho        Carrinho?
}

model Endereco {
  id          String    @id @default(uuid())
  cep         String?   @db.VarChar()
  rua         String?   @db.VarChar()
  bairro      String?   @db.VarChar()
  numero      String?   @db.VarChar()
  cidade      String?   @db.VarChar()
  estado      String?   @db.VarChar()
  complemento String?   @db.VarChar()
  usuarios    Usuario[] @relation("UsuarioEndereco")
  pedidos     Pedido[]

  @@map("enderecos")
}

model Pedido {
  id            String         @id @default(uuid())
  numeroPedido  Int            @unique
  status        status?
  precoTotal    Float?         @db.Real
  meioPagamento meioPagamento?

  dataCriacao     DateTime? @default(now()) @map("data de criacao") @db.Date
  dataAtualizacao DateTime? @default(now()) @map("data de atualizacao") @db.Date
  dataAgendamento DateTime? @db.Timestamp()

  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
  endereco   Endereco @relation(fields: [enderecoId], references: [id])
  usuarioId  String
  enderecoId String

  pedidoItens PedidoItem[]

  @@map("pedidos")
}

model Item {
  id              String    @id @default(uuid())
  nome            String?   @db.VarChar()
  preco           Float?    @db.Real
  descricao       String?   @db.VarChar()
  image           String?   @db.VarChar()
  dataCriacao     DateTime? @default(now()) @map("data de criacao") @db.Date
  dataAtualizacao DateTime? @default(now()) @map("data de atualizacao") @db.Date
  disponivel      Boolean?

  pedidoItens   PedidoItem[]
  carrinhoItens CarrinhoItens[]

  @@map("itens")
}

model Carrinho {
  id            String    @id @default(uuid())
  dataCriacao   DateTime? @default(now()) @map("data de criacao") @db.Date
  dataExpiracao DateTime? @db.Date

  Usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId String  @unique

  carrinhoItens CarrinhoItens[]
}

model PedidoItem {
  id         String @id @default(uuid())
  quantidade Int
  precoAtual Float  @db.Real

  pedido   Pedido @relation(fields: [pedidoId], references: [id])
  item     Item   @relation(fields: [itemId], references: [id])
  pedidoId String
  itemId   String

  @@map("pedido_itens")
}

model CarrinhoItens {
  id         String @id @default(uuid())
  quantidade Int
  precoAtual Float  @db.Real

  Carrinho   Carrinho @relation(fields: [carrinhoId], references: [id])
  Item       Item     @relation(fields: [itemId], references: [id])
  carrinhoId String
  itemId     String
}
